
# import UserOrderByInput,PostOrderByInput,CommentOrderByInput from './generated/prisma.graphql


 type Query{
     greeting(name:String):String!
     add(a:Float!,b:Float!):Float!
     add1(numbers:[Float!]!):Float!
     me: User!
     comments(first:Int,skip:Int,after:Int,CommentOrderByInput):[Comment!]!
     myPosts(query:String,first:Int,skip:Int,after:String,PostOrderByInput):[Post!]!
     grapes:[Int!]!
     id:ID!
     name:String!
     age:Int!
     post(id:ID!):Post!
     height:Float
     employed:Boolean!
     users(query:String,first:Int,skip:Int,after:String,orderBy:UserOrderByInput):[User!]!
     posts(query:String,first:Int,skip:Int,after:String,orderBy:PostOrderByInput):[Post!]!
 }


input CreateUserInput{
    name:String!
    email:String
    password: String!
}

 type Mutation{
     createUser(data:CreateUserInput ):AuthPayload!  
     deleteUser(id:ID!):User!  
     deletePost(id:ID!):Post!
     createPost(data:CreatePostInput):Post!
     createComment(data:CreateCommentInput):Comment!
     updatePost(id:ID!,data:UpdatePostInput):Post!
     updateUser(data:UpdateUserInput):User!
     deleteComment(id:ID!):Comment!
     updateComment(id:ID,data:UpdateCommentInput):Comment!
     login( data:LoginUserInput! ):AuthPayload!


    }

type CreateCommentInput{
text:String!
post:ID!
}

input CreatePostInput{
title:String!
body:String
published:Boolean
}

input LoginUserInput{
    email: String!
    password: String!
}

type Subscription{
    count:Int!
    comment(postId:ID!):CommentSubscriptionPayload!
    post:PostSubscriptionPayload!
    myPost:PostSubscriptionPayload!
}


input UpdateCommentInput{
text:String
body:String
}

input UpdatePostInput{
title:String,
body:String,
published:Boolean
}


input UpdateUserInput{
name:String!
email:String
password:String
}


type AuthPayload{
token:String!
user:User!
}

  type User{
      id:ID!
      name:String!
      email:String
      password:String!
      posts:[Post!]!
      comments:[Comment!]!
      updatedAt:String!
      createdAt:String!
  }

  type Post{
      id:ID
      title:String!
      body:String
      published:Boolean
      author:User!
      comments:[Comment!]!
      updatedAt:String!
      createdAt:String!
  }

  type Comment{
      id:ID!
      text:String!
      author:User!
      post:Post!
      updatedAt:String!
      createdAt:String!
  }


enum MutationType{

CREATED
UPDATED
DELETED

}


type CommentSubscriptionPayload {

  mutation:MutationType!
  node:Comment

}  

   type PostSubscriptionPayload{
   mutation:MutationType!
   node:Post
}